// Lexer definition
HEX_NUMBER: /0x[\da-f]*l?/i
%import common.FLOAT
%import common.INT
%import common.CNAME

%import common.ESCAPED_STRING
%import common.WS_INLINE

%declare _INDENT _DEDENT
%ignore WS_INLINE
%ignore COMMENT

// '//' or ';' will command to new line
COMMENT: /(\/\/|;)[^\n]*/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+
// MULTILINE_COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//


start: (_NEWLINE | stmt)*

?simple_stmt: small_stmt _NEWLINE
?small_stmt: expr
           | assign
           | variable_decl
           | variable_decl "=" expr -> decl_assign
           | "return" [expr] -> return
           | "continue" -> continue
           | "break" -> break
           | "pass" -> pass

?stmt: simple_stmt
    | if_stmt
    | while_stmt
    | function_decl

type: "U8" -> u8
    | "I8" -> i8
    | "U16" -> u16
    | "I16" -> i16
    | "U32" -> u32
    | "I32" -> i32
    | "U64" -> u64
    | "I64" -> i64
    | "F32" -> f32
    | "F64" -> f64
    | "bool" -> bool
    | "string" -> string
    | "bytes" -> bytes

variable_decl: CNAME ":" type

?suite: simple_stmt | _NEWLINE _INDENT (stmt)+ _DEDENT

function_args: [variable_decl ("," variable_decl)*]
function_decl: "def" CNAME "(" function_args ")" "->" (type | "void") ":" suite

if_clause: "if" expr ":" suite
elif_clause: "elif" expr ":" suite
else_clause: "else" ":" suite

if_stmt: if_clause (elif_clause)* [else_clause]
while_stmt: "while" expr ":" suite

// These expressions allow us to create an order of
// operations as needed. These are reduced before the
// main expressions are reduced

?expr_primary: "(" expr ")"
            | CNAME "(" [expr ( "," expr )*] ")" -> call
            | command
            | "(" type ")" expr -> cast

command_name: CNAME "." CNAME // component.COMMAND_NAME
command: command_name (expr)* // any expression can be an argument
                              // Runtime time mismatches may occur if call expression is used

?expr_literal: FLOAT -> lit_float
    | INT -> lit_int
    | HEX_NUMBER -> lit_int
    | ESCAPED_STRING -> lit_string
    | ("True" | "true" | "TRUE") -> lit_true
    | ("False" | "false" | "FALSE") -> lit_false

?expr_order_of_ops: expr_ "/" expr_ -> div
    | expr_ "*" expr_ -> mul

// Setting a variable will deserialize into memory
// Either the left-hand or the right-hand sides need to have
// a strong type annotation.
?expr_assignable: CNAME -> var
                // | CNAME ("," CNAME)+ -> tuple

?expr_: expr_primary
    | expr_literal
    | expr_order_of_ops
    | expr_assignable
    | expr_ "<" expr_ -> lt
    | expr_ ">" expr_ -> gt
    | expr_ "<=" expr_ -> le
    | expr_ ">=" expr_ -> ge
    | expr_ "==" expr_ -> eq
    | expr_ "!=" expr_ -> neq
    | expr_ "+" expr_ -> add
    | expr_ "-" expr_ -> sub
    | expr_ "&&" expr_ -> log_and
    | expr_ "and" expr_ -> log_and
    | expr_ "||" expr_ -> log_or
    | expr_ "or" expr_ -> log_or
    | "!" expr_ -> log_not
    | "not" expr_ -> log_not
    // TODO(tumbar) Support bitwise operators?
    // | expr_ "&" expr_ -> bit_and
    // | expr_ "|" expr_ -> bit_or
    // | expr_ "^" expr_ -> bit_xor
    // | expr_ ">>" expr_ -> shift_right
    // | expr_ "<<" expr_ -> shift_left
    // | "~" expr_ -> bit_not

assign: expr_assignable "=" expr_

?expr: expr_
     | "(" assign ")"
